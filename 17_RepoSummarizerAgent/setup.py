#!/usr/bin/env python3
"""
Setup script for RepoSummarizerAgent - Day 17 of #100DaysOfAI-Agents

This script helps users set up their environment variables and configuration.
"""

import os
import sys
from pathlib import Path


def create_env_file():
    """Create a .env file with required configuration."""
    env_file = Path(".env")
    
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("Setup cancelled.")
            return False
    
    print("\nüîß Setting up environment configuration...")
    print("=" * 50)
    
    # Get OpenAI API key
    print("\nüìù OpenAI API Key is required for this agent to work.")
    print("   Get your API key from: https://platform.openai.com/api-keys")
    api_key = input("Enter your OpenAI API key: ").strip()
    
    if not api_key:
        print("‚ùå OpenAI API key is required!")
        return False
    
    # Get optional GitHub token
    print("\nüîë GitHub Personal Access Token (optional)")
    print("   This provides higher rate limits for GitHub API calls.")
    print("   Get one from: https://github.com/settings/tokens")
    github_token = input("Enter your GitHub token (or press Enter to skip): ").strip()
    
    # Get optional model preference
    print("\nü§ñ AI Model Selection (optional)")
    print("   Available models: gpt-4, gpt-4-turbo, gpt-3.5-turbo")
    print("   Default: gpt-4")
    model = input("Enter preferred model (or press Enter for default): ").strip()
    
    # Build .env content
    env_content = f"""# RepoSummarizerAgent Configuration
# Generated by setup.py

# OpenAI Configuration
OPENAI_API_KEY={api_key}

# GitHub Configuration (optional)
{f"GITHUB_TOKEN={github_token}" if github_token else "# GITHUB_TOKEN=your_github_token_here"}

# AI Model Configuration
{f"OPENAI_MODEL={model}" if model else "OPENAI_MODEL=gpt-4"}

# Optional Settings
MAX_TOKENS=4000
TEMPERATURE=0.3
MAX_FILE_SIZE=1048576
MAX_FILES_TO_ANALYZE=50
"""
    
    # Write .env file
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"\n‚úÖ Environment configuration saved to {env_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to create .env file: {e}")
        return False


def validate_setup():
    """Validate that the setup is complete."""
    env_file = Path(".env")
    
    if not env_file.exists():
        print("‚ùå .env file not found!")
        return False
    
    # Check if OpenAI API key is set
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("‚ùå OPENAI_API_KEY not found in .env file!")
            return False
        
        print("‚úÖ Environment configuration validated!")
        return True
        
    except ImportError:
        print("‚ùå python-dotenv not installed. Run: pip install python-dotenv")
        return False
    except Exception as e:
        print(f"‚ùå Validation failed: {e}")
        return False


def main():
    """Main setup function."""
    print("üöÄ RepoSummarizerAgent - Day 17 Setup")
    print("=" * 50)
    
    # Check if virtual environment exists
    venv_path = Path("venv")
    if not venv_path.exists():
        print("‚ö†Ô∏è  Virtual environment not found!")
        print("   Please run 'install.bat' first to create the virtual environment.")
        return False
    
    # Create .env file
    if not create_env_file():
        return False
    
    # Validate setup
    if not validate_setup():
        return False
    
    print("\nüéâ Setup completed successfully!")
    print("\nNext steps:")
    print("1. Activate your virtual environment:")
    print("   Windows: venv\\Scripts\\activate")
    print("   macOS/Linux: source venv/bin/activate")
    print("\n2. Test the agent:")
    print("   python main.py --url https://github.com/user/repo")
    print("\n3. For help:")
    print("   python main.py --help")
    
    return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
