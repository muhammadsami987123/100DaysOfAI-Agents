import openai
from typing import Dict, Any
from config.openai_config import OpenAIConfig

class HtmlGenerator:
    """Handles generation of HTML from natural language descriptions"""

    def __init__(self, config: OpenAIConfig):
        self.config = config
        self.client = config.get_client()

    def generate_html(self, description: str, html_version: str = "html5", minimal: bool = False) -> str:
        """
        Generates HTML code based on a natural language description.

        Args:
            description: A natural language description of the desired HTML.
            html_version: The HTML version to use (e.g., "html5").
            minimal: If True, generate minimal HTML markup.

        Returns:
            The generated HTML code as a string.
        """
        if not self.config.is_available():
            return self._fallback_html_generation(description, html_version, minimal)

        prompt = self._create_generation_prompt(description, html_version, minimal)
        try:
            response = self.client.chat.completions.create(
                model=self.config.get_model(),
                messages=[
                    {"role": "system", "content": self._get_system_prompt_generate(html_version, minimal)},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=self.config.get_max_tokens(),
                temperature=self.config.get_temperature()
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"Error calling OpenAI API for HTML generation: {e}")
            return self._fallback_html_generation(description, html_version, minimal)

    def _get_system_prompt_generate(self, html_version: str, minimal: bool) -> str:
        """System prompt for HTML generation"""
        base_prompt = "You are an expert HTML developer. Your task is to generate clean, semantic, and accessible HTML code based on user descriptions. Always prioritize best practices for accessibility and SEO. Wrap the generated HTML in a Markdown code block with 'html' language specifier."
        if html_version == "html5":
            base_prompt += " Ensure the output is valid HTML5."
        if minimal:
            base_prompt += " Generate minimal markup, focusing only on the requested elements without extra boilerplate if not explicitly asked."
        return base_prompt

    def _create_generation_prompt(self, description: str, html_version: str, minimal: bool) -> str:
        """Create prompt for HTML generation"""
        prompt = f"Generate HTML code for the following description: '{description}'."
        prompt += f" Use {html_version} standards."
        if minimal:
            prompt += " Keep the markup minimal."
        return prompt

    def _fallback_html_generation(self, description: str, html_version: str, minimal: bool) -> str:
        """Fallback HTML generation when OpenAI is not available"""
        if "button" in description.lower():
            return "```html\n<button type=\"button\">Click Me</button>\n```"
        elif "header" in description.lower() or "footer" in description.lower() or "navigation" in description.lower():
            return """```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generated Page</title>
</head>
<body>
    <header>
        <h1>Welcome</h1>
        <nav>
            <ul>
                <li><a href="#">Home</a></li>
                <li><a href="#">About</a></li>
            </ul>
        </nav>
    </header>
    <main>
        <p>Main content goes here.</p>
    </main>
    <footer>
        <p>&copy; 2023 Generated by HTMLHelperBot</p>
    </footer>
</body>
</html>
```"""
        return f"""```html
<!-- HTML generation not available offline. Please set up your OpenAI API key. -->
<!-- Description: {description} -->
<!-- Version: {html_version}, Minimal: {minimal} -->
<div>
    <h1>Fallback Content</h1>
    <p>Please provide an API key for full functionality.</p>
</div>
```"""
